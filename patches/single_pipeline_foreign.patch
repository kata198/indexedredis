diff --git a/IndexedRedis/__init__.py b/IndexedRedis/__init__.py

Converts cascadeFetch to fetch all related models in a single transaction, using lua engine.

Perforamnce is slightly lower, but the full fetch happens in a single atomic transaction.

index 2f96fea..25ce9cb 100644
--- a/IndexedRedis/__init__.py
+++ b/IndexedRedis/__init__.py
@@ -17,7 +17,7 @@ import uuid
 from collections import defaultdict, OrderedDict
 
 from . import fields
-from .fields import IRField, IRFieldChain, IRClassicField, IRNullType, irNull, IR_NULL_STR, IRForeignLinkFieldBase
+from .fields import IRField, IRFieldChain, IRClassicField, IRNullType, irNull, IR_NULL_STR, IR_NULL_BYTES, IRForeignLinkFieldBase
 from .compat_str import to_unicode, tobytes, setDefaultIREncoding, getDefaultIREncoding
 from .utils import hashDictOneLevel, KeyList
 
@@ -266,6 +266,10 @@ _modelCopyMap = defaultdict(lambda : int(1))
 # Changing redis encoding into requested encoding
 decodeDict = lambda origDict : {to_unicode(key) : origDict[key] for key in origDict}
 
+
+def hgetListToDict(hgetLst):
+	return { hgetLst[i] : hgetLst[i+1] for i in range(0, len(hgetLst), 2) }
+
 global validatedModels
 validatedModels = set()
 
@@ -1303,6 +1307,10 @@ class IndexedRedisHelper(object):
 		'''
 		return ''.join([INDEXED_REDIS_PREFIX, self.keyName, ':data:', to_unicode(pk)])
 
+	@staticmethod
+	def _get_key_for_id_for_model(mdl, pk):
+		return ''.join([INDEXED_REDIS_PREFIX, mdl.KEY_NAME, ':data:', to_unicode(pk)])
+
 	def _get_next_id_key(self):
 		'''
 			_get_next_id_key - Returns the key name that holds the generator for primary key values
@@ -1737,7 +1745,7 @@ class IndexedRedisQuery(IndexedRedisHelper):
 		if type(pks) == set:
 			pks = list(pks)
 
-		if len(pks) == 1:
+		if not cascadeFetch and len(pks) == 1:  # TODO: Hack for cascadeFetch. Remove when get implements cascadeFetch
 			# Optimization to not pipeline on 1 id
 			return IRQueryableList([self.get(pks[0], cascadeFetch=cascadeFetch)], mdl=self.mdl)
 
@@ -1747,22 +1755,239 @@ class IndexedRedisQuery(IndexedRedisHelper):
 			key = self._get_key_for_id(pk)
 			pipeline.hgetall(key)
 
+		if cascadeFetch and self.mdl.foreignFields:
+			
+			splitFunction = """
+			function mysplit(inputstr, sep)
+				if sep == nil then
+					sep = "%s"
+				end
+				local t={} ; i=1
+				for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
+					t[i] = str
+					i = i + 1
+				end
+				return t
+			end
+"""
+			def _addLinesForForeign(_lines, _idKey, parentModel, foreignFields):
+				for foreignField in foreignFields:
+					foreignModel = foreignField.foreignModel
+
+					fieldName = 'fk_%s_%s' %( to_unicode(_idKey), str(hash(str(foreignField))).replace('-', 'N') )
+
+					x =     "local " + fieldName + " = redis.call('HGET', '" + self._get_key_for_id_for_model(parentModel, '') + "' .. " + _idKey + ", '" + str(foreignField) + "')"
+					_lines.append(x)
+
+					iterFieldName = "splt_" + fieldName
+
+					x = "    local ret_" + iterFieldName + " = {}"
+					_lines.append(x)
+					x =     "for " + iterFieldName + " in string.gmatch(" + fieldName + ", '([^,]+)' ) do "
+					_lines.append(x)
+
+					x = "        if " + iterFieldName + " == '" + IR_NULL_STR + "'"
+					_lines.append(x)
+					x = "        then"
+					_lines.append(x)
+					x = "            table.insert(ret_" + iterFieldName + ", '" + IR_NULL_STR + "')"
+					_lines.append(x)
+					x = "        else"
+					_lines.append(x)
+
+					x = "            local " + iterFieldName + "_res = redis.call('HGETALL', '" + self._get_key_for_id_for_model(foreignModel, '') + "' .. " + iterFieldName + ")"
+					_lines.append(x)
+					x = '            table.insert( ' + iterFieldName + '_res, "_id")'
+					_lines.append(x)
+					x = '            table.insert( ' + iterFieldName + '_res, ' +  iterFieldName + ')'
+					_lines.append(x)
+
+					x = "            table.insert(ret_" + iterFieldName + ", " + iterFieldName + "_res" + ")"
+					_lines.append(x)
+					x = "        end"
+					_lines.append(x)
+
+					nextModel = foreignField.foreignModel
+					nextModel.validateModel()
+
+					if nextModel.foreignFields:
+						_addLinesForForeign( _lines, iterFieldName, foreignModel, nextModel)
+
+					x = "    end"
+					_lines.append(x)
+					x = "    table.insert(ret, ret_" + iterFieldName + ")"
+					_lines.append(x)
+				
+
+
+			splitFunction = ''
+			for pk in pks:
+				lines = []
+				lines.append('local ret = {}')
+				key = self._get_key_for_id(pk)
+
+
+				for foreignField in self.mdl.foreignFields:
+					fieldName = 'fk_%s_%s' %( to_unicode(pk), str(hash(str(foreignField))).replace('-', 'N') )
+
+					x = "local " + fieldName + " = redis.call('HGET', '" + key + "', '" + str(foreignField) + "')"
+					lines.append(x)
+
+					iterFieldName = "splt_" + fieldName
+
+					lines.append( "local ret_" + iterFieldName + " = {}" )
+					x = "for " + iterFieldName + " in string.gmatch(" + fieldName + ", '([^,]+)' ) do "
+					lines.append(x)
+
+					x = "     if " + iterFieldName + " == '" + IR_NULL_STR + "'"
+					lines.append(x)
+					x = "     then"
+					lines.append(x)
+					x = "         table.insert( ret_" + iterFieldName + ", '" + IR_NULL_STR + "')"
+					lines.append(x)
+					x = "     else"
+					lines.append(x)
+					x = "         local " + iterFieldName + "_res = redis.call('HGETALL', '" + self._get_key_for_id_for_model(foreignField.foreignModel, '') + "' .. " + iterFieldName + ")"
+					lines.append(x)
+
+					x = '         table.insert( ' + iterFieldName + '_res, "_id")'
+					lines.append(x)
+
+					x = '         table.insert( ' + iterFieldName + '_res, ' +  iterFieldName + ')'
+					lines.append(x)
+					x = "         table.insert(ret_" + iterFieldName + ", " + iterFieldName + "_res" + ")"
+					lines.append(x)
+
+					foreignModel = foreignField.foreignModel
+					foreignModel.validateModel()
+
+					if foreignModel.foreignFields:
+						_addLinesForForeign(lines, iterFieldName, foreignModel, foreignModel.foreignFields)
+					x = "    end"
+					lines.append(x)
+					x = "end"
+					lines.append(x)
+					x = '    table.insert(ret, ret_' + iterFieldName + ')'
+					lines.append(x)
+
+
+				lines.append('\nreturn ret')
+				#import pdb; pdb.set_trace()
+				#print ( splitFunction + "\n" + "\n".join(lines) + "\n" )
+
+				pipeline.eval(splitFunction + '\n' + '\n'.join(lines) + '\n', 0)
+
+#			import pdb; pdb.set_trace()
+				
+
 		res = pipeline.execute()
 		
 		ret = IRQueryableList(mdl=self.mdl)
-		i = 0
+		retIdx = 0
+
+		resIdx = 0
+		numRes = len(res)
+
+
+		def setObjData(res, resIdx, objs, foreignFields, thisSetIdx=0):
+			#import pprint
+			#pprint.pprint(res)
+#			for i in range(len(objs)):
+			for obj in objs:
+				#obj = objs[i]
+				for foreignField in foreignFields:
+					if res[resIdx] == IR_NULL_BYTES or res[resIdx][thisSetIdx] == [IR_NULL_BYTES]:
+						isNull = True
+
+						setattr(obj, foreignField, irNull)
+						thisSetIdx -= 1
+					else:
+						isNull = False
+						items = []
+
+						for hgetResult in res[resIdx][thisSetIdx]:
+							foreignDict = hgetListToDict( hgetResult )
+							val = IndexedRedisQuery( foreignField.foreignModel )._redisResultToObj( foreignDict )
+							val._id = int(foreignDict[b'_id'])
+
+							items.append(val)
+
+						if foreignField.isMulti():
+							item = items
+						else:
+							item = items[0]
+
+						#print ( "Item is: %s\n", repr(item) )
+						setattr(obj, foreignField, item)
+						thisSetIdx -= 1
+
+
+						foreignModel = foreignField.foreignModel
+						foreignModel.validateModel()
+						if foreignModel.foreignFields:
+							thisSetIdx = setObjData(res, resIdx, reversed ( items ), foreignModel.foreignFields, thisSetIdx)
+							#thisSetIdx = setObjData(res, resIdx, items , foreignModel.foreignFields, thisSetIdx)
+
+			return thisSetIdx
+			
+
 		pksLen = len(pks)
-		while i < pksLen:
-			if res[i] is None:
+		# TODO: when missing obj
+		doSubModels = False
+		while resIdx < numRes:
+			if res[resIdx] is None:
 				ret.append(None)
-				i += 1
+				retIdx += 1
+				resIdx += 1
 				continue
-			res[i]['_id'] = pks[i]
-			obj = self._redisResultToObj(res[i])
+			res[resIdx]['_id'] = pks[retIdx]
+			obj = self._redisResultToObj(res[retIdx])
 			ret.append(obj)
-			i += 1
+			retIdx += 1
+			resIdx += 1
+			if self.mdl.foreignFields and isinstance(res[retIdx], (list, tuple)):
+				doSubModels = True
+				break
+
+		#import pdb; pdb.set_trace()
+
+		if doSubModels:
+			oldResIdx = resIdx
+#			newResIdx = len(res) - 1
+			newResIdx = oldResIdx
+			for i in range(len(ret)):
+				#print ( "newResIdx is %s and res[resIdx] is %s" %( newResIdx, res[newResIdx] ) )
+				obj = ret[i]
+				setIdx = len(res[newResIdx])-1
+				try:
+					setIdx = setObjData(res, newResIdx, [obj], self.mdl.foreignFields, setIdx)
+				except Exception as e:
+					exc = sys.exc_info()
+					import traceback
+					traceback.print_exception(*exc)
+					raise e
+				try:
+					obj.main
+				except:
+					exc = sys.exc_info()
+					traceback.print_exception(*exc)
+				#newResIdx -= 1
+				newResIdx += 1
 
-		if cascadeFetch is True:
+				
+
+#	if self.mdl.foreignFields:
+#		for i in range(ret):
+#			if res[resIdx] is None:
+#				resIdx += 1
+#				continue
+#			
+#				#import pdb; pdb.set_trace()
+#				setObjData(res, resIdx, [obj], self.mdl.foreignFields, len(res[resIdx])-1)
+#				resIdx += 1
+
+#		import pdb; pdb.set_trace()
+		if False and cascadeFetch is True:
 			for obj in ret:
 				if not obj:
 					continue
