diff --git a/IndexedRedis/__init__.py b/IndexedRedis/__init__.py

This patch adds numeric filters ( lt, le/lte , gt, ge/gte ) to Redis-side filtering, using LUA.


It's not super efficent and can be improved, but for some use cases this is better than client-side filtering.


May be merged in eventually once I clean and integrate it across the board. Will also add things like "contains" and "icontains" for strings,  "contains" (in) for mutli link fields, etc.


index f67ae9b..1ae78ee 100644
--- a/IndexedRedis/__init__.py
+++ b/IndexedRedis/__init__.py
@@ -1184,7 +1184,10 @@ class IndexedRedisHelper(object):
 		if conn is None:
 			conn = self._get_connection()
 		conn.srem(self._get_key_for_index(indexedField, val), pk)
-		
+
+	def _get_prefix_for_index(self, indexedField):
+		return ''.join( [INDEXED_REDIS_PREFIX, self.keyName, ':idx:', indexedField, ':'] )
+
 	def _get_key_for_index(self, indexedField, val):
 		'''
 			_get_key_for_index - Returns the key name that would hold the indexes on a value
@@ -1290,10 +1293,13 @@ class IndexedRedisQuery(IndexedRedisHelper):
 		self.filters = [] # Filters are ordered for optimization
 		self.notFilters = []
 
+		self.specialFilters = []
+
 	def __copy__(self):
 		ret = self.__class__(self.mdl)
 		ret.filters = self.filters[:]
 		ret.notFilters = self.notFilters[:]
+		ret.specialFilters = self.specialFilters[:]
 
 		return ret
 	
@@ -1345,18 +1351,31 @@ class IndexedRedisQuery(IndexedRedisHelper):
 			Internal for handling filters; the guts of .filter and .filterInline
 		'''
 		for key, value in kwargs.items():
+			filterType = None
 			if key.endswith('__ne'):
-				notFilter = True
+				filterType = 'ne'
+				key = key[:-4]
+			elif key.endswith( ('__lt', '__le', '__gt', '__ge' ) ):
+
+				filterType = key[-2:]
 				key = key[:-4]
+			elif key.endswith( ( '__lte', '__gte' ) ):
+				filterType = key[-3] + key[-1]
+				key = key[:-5]
+
 			else:
+				filterType = 'eq'
 				notFilter = False
+
 			if key not in filterObj.indexedFields:
 				raise ValueError('Field "' + key + '" is not in INDEXED_FIELDS array. Filtering is only supported on indexed fields.')
 
-			if notFilter is False:
+			if filterType == 'eq':
 				filterObj.filters.append( (key, value) )
-			else:
+			elif filterType == 'ne':
 				filterObj.notFilters.append( (key, value) )
+			else:
+				filterObj.specialFilters.append( (filterType, key, value) )
 
 		return filterObj #chaining
 
@@ -1416,6 +1435,58 @@ class IndexedRedisQuery(IndexedRedisHelper):
 		return conn.exists(key)
 			
 
+
+	def _get_numeric_filter_script(self, field, value, operand):
+		keyPrefix = self._get_prefix_for_index(field)
+
+		ret = []
+
+		keysFieldName = "field%s_keys" %( str(hash(field)).replace('-', 'N') , )
+
+		idKeysName = "idkeys_" + keysFieldName
+
+		ret.append("local %s = {}" %(idKeysName, ))
+		ret.append("local %s = redis.call('KEYS', '%s*')" %( keysFieldName, keyPrefix))
+
+		ret.append("""
+for _,key in pairs(%s) do
+	local thisKey = string.sub(key, %d)
+	if thisKey ~= '' and thisKey ~= '%s' then
+		local thisNumber = tonumber( thisKey )
+		if thisNumber %s %d then
+			table.insert( %s, '%s' .. thisKey )
+		end
+	end
+end
+""" %( keysFieldName,  len(keyPrefix) + 1, IR_NULL_STR, operand, int(value), idKeysName, keyPrefix )
+)
+
+		ret.append("""
+if #%s == 0 then
+	return {}
+end
+
+local ret = redis.call ( 'SUNION', unpack(%s) )
+
+return ret
+
+""" % ( idKeysName, idKeysName )
+)
+		return '\n'.join(ret)
+
+	def _get_lt_filter_script(self, field, value):
+		return self._get_numeric_filter_script(field, value, '<')
+		
+	def _get_le_filter_script(self, field, value):
+		return self._get_numeric_filter_script(field, value, '<=')
+		
+	def _get_gt_filter_script(self, field, value):
+		return self._get_numeric_filter_script(field, value, '>')
+
+	def _get_ge_filter_script(self, field, value):
+		return self._get_numeric_filter_script(field, value, '>=')
+
+
 	def getPrimaryKeys(self, sortByAge=False):
 		'''
 			getPrimaryKeys - Returns all primary keys matching current filterset.
@@ -1430,7 +1501,45 @@ class IndexedRedisQuery(IndexedRedisHelper):
 		numFilters = len(self.filters)
 		numNotFilters = len(self.notFilters)
 
+
+		mustIntersect = None
+
+		if self.specialFilters:
+			filterScripts = []
+
+			conn = self._get_connection()
+			pipeline = conn.pipeline()
+
+			for specialFilter in self.specialFilters:
+				filterType = specialFilter[0]
+				if filterType == 'gte':
+					filterType = 'ge'
+				elif filterType == 'lte':
+					filterType = 'le'
+
+				filterScript = getattr(self, '_get_%s_filter_script' %(filterType, )) ( specialFilter[1], specialFilter[2] )
+				pipeline.eval( filterScript, 0 )
+
+			res = pipeline.execute()
+
+			matchedKeys = set(res[0])
+
+			for i in range(1, len(res), 1):
+				matchedKeys -= set(res[i])
+
+			if not matchedKeys:
+				return []
+			else:
+				mustIntersect = matchedKeys
+			
+
+
+			
+
 		if numFilters + numNotFilters == 0:
+			if mustIntersect:
+				return list(mustIntersect)
+
 			# No filters, get all.
 			conn = self._get_connection()
 			matchedKeys = conn.smembers(self._get_ids_key())
@@ -1463,6 +1572,10 @@ class IndexedRedisQuery(IndexedRedisHelper):
 				pipeline.delete(tempKey)
 				matchedKeys = pipeline.execute()[1] # sdiff
 
+
+		if mustIntersect:
+			matchedKeys = list ( set(matchedKeys).intersection(mustIntersect) )
+
 		if sortByAge is False:
 			return matchedKeys
 		else:
